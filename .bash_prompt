#!/bin/bash
# -*- coding: utf-8 -*-
# Various BASH components used to create my personal prompt.
#
# These are largely broken down into context, system status, and git
#
# Scott Nowers <scott.nowers@gmail.com>

PROMPT_SET_MINIMAL=false
PROMPT_SET_SYSTEM=true
KUBE_ONLY=fale
GIT_ONLY=true

#######################################
# Closure to set the proper functions used to query system
# information, git status and user and host to create a sensible
# BASH prompt
#######################################
function __ps1() {

    COLOR_WHITE="\[\033[1;37m\]"
    COLOR_DARK_COLOR_GREY="\[\033[1;30m\]"
    COLOR_BOLD_GREEN="\[\033[1;32m\]"
    COLOR_GREEN="\[\033[0;32m\]"
    COLOR_CYAN="\[\033[1;36m\]"
    COLOR_BOLD_CYAN="\[\033[1;36m\]"
    COLOR_BLUE="\[\033[0;34m\]"
    COLOR_GREY="\[\033[0;37m\]"
    COLOR_RED="\[\033[0;31m\]"
    COLOR_YELLOW="\[\033[0;33m\]"
    COLOR_GOLD="\[\033[1;33m\]"
    COLOR_DEFAULT="\[\033[0;39m\]"

    SYMBOL_GIT_PUSH='↑'
    SYMBOL_GIT_PULL='↓'

    #######################################
    # Prints UTC Time
    #######################################
    function _format_time() {
        local suffix="am"
        if [ `date +%p` = "PM" ]; then
            suffix="pm"
        fi
        date +"%l:%M:%S$suffix"|sed 's/ //g'
    }

    #######################################
    # Prints the available memory from "free"
    #######################################
    function _get_available_memory() {
        local mem=$(free -h | awk 'NR==2' | awk '{print $6}')
        local mem_kb=$(free | awk 'NR==2' | awk '{print $6}')
        mem_int=${mem_kb%.*}
        local color=${COLOR_RED}

        if (( "$mem_int" > 1048576 )); then
            color=${COLOR_GREEN}
        elif (( "$mem_int" > 524288 )); then
            color=${COLOR_GOLD}
        fi

        echo "${color}Mem: ${COLOR_DARK_COLOR_GREY}${mem}"
    }

    #######################################
    # Prints average CPU usage from "uptime"
    #######################################
    function _get_cpu_load() {
        local load=$(uptime|awk '{min=NF-2;print $min}')
        load=${load::-1}
        load_int=${load%.*}
        local color=${COLOR_RED}

        if (( "$load_int" < 10 )); then
            color=${COLOR_GREEN}
        elif (( "$load_int" < 40 )); then
            color=${COLOR_GOLD}
        fi

        echo "${color}CPU: ${COLOR_DARK_COLOR_GREY}${load}"
    }

    #######################################
    # Prints current Git branch or nothing
    #######################################
    function _get_kube_context() {
        local color=${COLOR_BOLD_GREEN}
        local branch=$(kubectl config current-context &>/dev/null; if [ $? -eq 0 ]; then echo "${color}[  ${color}$(kubectl config current-context) | ${COLOR_YELLOW}$(kubens -c) ${COLOR_DEFAULT}]"; fi)
        echo $branch
    }


    #######################################
    # Prints current Git branch or nothing
    #######################################
    function _get_git_branch() {
        local branch=$(git branch &>/dev/null; if [ $? -eq 0 ]; then echo "$(git branch  | grep ^*|sed s/\*\ //)\[\033[00m\]"; fi)
        echo $branch
    }

    #######################################
    # Prints current Git prompt, status and icons, if present
    #
    # Borrows heavily from https://github.com/magicmonty/bash-git-prompt
    #######################################
    function _get_git_prompt() {
        hash git 2>/dev/null || return # git not found

        local repo=$(git rev-parse --show-toplevel 2> /dev/null)
        if [[ ! -e "${repo}" ]]; then
            echo ""
            return
        fi

        local gitbranch=`_get_git_branch`
        local gitstatus=$(git status --branch --porcelain)

        local num_staged=0
        local num_changed=0
        local num_conflicts=0
        local num_untracked=0

        local staged=" ${COLOR_GREEN}--"
        local changed=" ${COLOR_YELLOW}--"
        local conflicts=" ${COLOR_RED}--"
        local untracked=" ${COLOR_BLUE}--"

        while IFS='' read -r line || [[ -n "${line}" ]]; do
            status="${line:0:2}"

        while [[ -n ${status} ]]; do
            case "${status}" in
                \#\#) branch_line="${line/\.\.\./^}"; break ;;
                    \?\?) ((num_untracked++)); break ;;
                    U?) ((num_conflicts++)); break;;
                    ?U) ((num_conflicts++)); break;;
                    DD) ((num_conflicts++)); break;;
                    AA) ((num_conflicts++)); break;;
                    ?M) ((num_changed++)) ;;
                    ?D) ((num_changed++)) ;;
                    ?\ ) ;;
                    U) ((num_conflicts++)) ;;
                    \ ) ;;
                    *) ((num_staged++)) ;;
                esac
                status="${status:0:(${#status}-1)}"
            done
        done <<< "${gitstatus}"

        local clean=0
        if (( num_changed == 0 && num_staged == 0 && num_untracked == 0 && num_conflicts == 0)) ; then
            echo "${COLOR_DEFAULT}[ ${COLOR_GOLD}${gitbranch} | ${COLOR_GOLD}✔ ${COLOR_DEFAULT}] "
            return
        fi

        (( $num_staged > 0 )) && staged=" ${COLOR_GREEN}●${COLOR_GREEN}${num_staged}"
        (( $num_untracked > 0 )) && untracked=" ${COLOR_BLUE}…${COLOR_BLUE}${num_untracked}"
        (( $num_changed > 0 )) && changed=" ${COLOR_YELLOW}✚${COLOR_YELLOW}${num_changed}"
        (( $num_conflicts > 0 )) && conflicts=" ${COLOR_RED}✖${COLOR_RED}${num_conflicts}"

        echo "${COLOR_DEFAULT}[ ${COLOR_GOLD}${gitbranch} |${staged}${untracked}${changed}${conflicts} ${COLOR_DEFAULT}] "
    }

    #######################################
    # Method to query an authenticated API url
    #
    # Globals:
    #  PROMPT_SET_MINIMAL: bool flag that removes CPU, memory and git from the prompt
    #  PROMPT_SET_SYSTEM: bool flag that includes CPU and memory. Forces new line
    #
    # Arguments:
    #   None
    # Returns:
    #   None
    #######################################
    function _prompt_command () {

        if [ $? -eq 0 ]; then
            local errprompt=""
        else
            local errprompt=' ->($?)'
        fi

        local err="${COLOR_RED}$errprompt"

        local path="${COLOR_BOLD_GREEN}\w"
        local host="${COLOR_BOLD_CYAN}[\[ ${COLOR_BOLD_CYAN}\u${COLOR_GREEN}@${COLOR_BOLD_CYAN}\h"
        # Check for the salt minion_id, which is more verbose
        if [[ -f /etc/salt/minion_id ]]; then
            local minion_id=`cat /etc/salt/minion_id`
            local host="${COLOR_BOLD_CYAN}[\[ ${COLOR_BOLD_CYAN}\u${COLOR_GREEN}@${COLOR_BOLD_CYAN}${minion_id}"
        fi

        # If this is a minimal implementation, just show the host and path
        if [[ "$PROMPT_SET_MINIMAL" == true ]]; then
            export PS1="${host} ${path} ${COLOR_BOLD_CYAN}]${err} ${COLOR_DEFAULT}$ "
            return
        fi

        local full_prompt=`_get_git_prompt`
        if [[ "$KUBE_ONLY" == true ]]; then
            local full_prompt=`_get_kube_context`
        elif [[ "$GIT_ONLY" == false ]]; then
            local kube=`_get_kube_context`
            local full_prompt="${full_prompt}${kube}"
        fi

        if [[ "$PROMPT_SET_SYSTEM" == false ]]; then
            export PS1="${host} ${path} ${COLOR_BOLD_CYAN}]${err} ${full_prompt}${COLOR_DEFAULT}$ "
            return
        fi

        local cpu=`_get_cpu_load`
        local time=`_format_time`
        # local mem=`_get_available_memory`

        export PS1="${host} ${cpu} ${COLOR_WHITE}${time} ${path} ${COLOR_BOLD_CYAN}]${err}\n${full_prompt}${COLOR_DEFAULT}$ "
    }

    # Set the prompt command method; this will be invoked by BASH
    PROMPT_COMMAND=_prompt_command
}

# Execute and remove from the global namespace
__ps1
unset __ps1
