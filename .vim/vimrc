set nocompatible

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.vim/plugged')
Plug 'tmux-plugins/vim-tmux'
Plug 'aliou/bats.vim'
" snipmate
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'ervandew/supertab'
" devops
Plug 'vim-denops/denops.vim'
Plug 'skanehira/denops-docker.vim'
" focus
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
" status
Plug 'vim-airline/vim-airline'
" color and interface
Plug 'flazz/vim-colorschemes'
Plug 'itchyny/vim-cursorword'  " highlight all instances of a word under the current cursor
Plug 'mhinz/vim-startify'  " nicer splash screen
" build tools
Plug 'reinh/vim-makegreen'  " running MakeGreen executes a make command
" browsing
Plug 'scrooloose/NERDTree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
Plug 'sandeepcr529/Buffet.vim', { 'on': 'Bufferlist' }
Plug 'jreybert/vimagit', { 'on': 'Magit'  }
" tag management
Plug 'ludovicchabant/vim-gutentags'
" tim pope's crazy utility belt
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-surround'
" simple make controls
Plug 'reinh/vim-makegreen'
" terraform
Plug 'hashivim/vim-terraform'
" alignment
Plug 'godlygeek/tabular'
" searching
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mileszs/ack.vim'
Plug 'kshenoy/vim-signature'  " mark navigation
Plug 'dkprice/vim-easygrep'  " used for find and replace
" git/version control
Plug 'airblade/vim-gitgutter'
" python
Plug 'Vimjas/vim-python-pep8-indent', { 'for': 'python' }  " dead simple, but fixes auto-indent for python
" utility
Plug 'skywind3000/asyncrun.vim'  " allows for any command to be executed async (vim8 only)
" typing optimization
Plug 'jiangmiao/auto-pairs'  " auto-complete [], {}, () etc.
Plug 'AndrewRadev/splitjoin.vim'  " gS and gJ to collapse and expand lists
" auto complete
Plug 'Valloric/YouCompleteMe'
" javascript
Plug 'pangloss/vim-javascript', { 'for': ['javascript'] }
Plug 'mxw/vim-jsx', { 'for' : ['javascript'] }
" typescript
Plug 'leafgarland/typescript-vim'
" salt
Plug 'glench/vim-jinja2-syntax'
Plug 'saltstack/salt-vim'
"  lint and fixing
Plug 'w0rp/ale'
" fin
call plug#end()

" there are many like it, but this one is mine
let mapleader = ","

" enable filetype plugins
filetype plugin indent on

" standard file type ignore
set wildignore+=*/tmp/*,*.swo,*.swp,*.pyc,__pycache__,*.zip

" commands for auto-reload of VIM when changing the vimrc file
if has("autocmd")
  augroup vimrc
    autocmd!
    autocmd BufWritePost vimrc source $MYVIMRC
  augroup end
endif

" enable persistent storage
if has('persistent_undo')
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
    set undofile
endif

" colorscheme, if available
"
try
    colorscheme molokai 
catch /^Vim\%((\a\+)\)\=:E185/
    colorscheme elflord 
endtry

" indentation rules
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" interface
set autoread
set nu
set ruler
set encoding=utf-8
set scrolloff=3
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest,full
set visualbell
set ttyfast
set backspace=indent,eol,start
set laststatus=2
set wrap
set formatoptions=qrn1
set linebreak
set t_Co=256

" smarter file searching; only use case-sensitive if a capital letter is present
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set bs=2

" fold rules
set foldenable
set foldlevelstart=20
set foldmethod=indent

" custom escape key
inoremap ii <ESC>
vnoremap ii <ESC>

" browsing hot keys
nnoremap <F2> :NERDTreeToggle<cr>
nnoremap <F3> :TagbarToggle<cr>
nnoremap <F4> :Bufferlist<cr>
nnoremap <F5> :Magit<cr>
nnoremap <F6> :UndotreeToggle<cr>

" lint and fix
nnoremap <Leader>s :ALEFix<cr>

" quickfix toggle via asyncrun
nnoremap <leader>q :call asyncrun#quickfix_toggle(8)<cr>
" preview toggle by pclose
nnoremap <leader>Q :pclose<cr>

" don't break from visual mode when changing indentation
vnoremap < <gv
vnoremap > >gv

" cursor line highlight
autocmd WinEnter,InsertLeave * set cursorline
autocmd WinLeave,InsertEnter * set nocursorline

" this line; visual mode to end of line with no newline
nnoremap tl 0vg_

" searching hot keys
nnoremap <leader>f :CtrlP<cr>
nnoremap <leader>t :CtrlPTag<cr>
nnoremap <leader>a :Ack

" commentary
noremap <leader>v  :Commentary<cr>

" ycm commmands; used extensively for moving between buffers and viewing
" the doc strings and stacks of a function
nnoremap yd :YcmCompleter GoToDeclaration<cr>
nnoremap yr :YcmCompleter GoToReferences<cr>
nnoremap ye :YcmCompleter GetDoc<cr>

" correct fold depth
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<cr>
vnoremap <Space> zf

" MakeGreen
nnoremap <leader>g :MakeGreen<cr>

"""
" PLUGIN Configuration
"""

" tagbar
let g:tagbar_width = 40
set tags=./tags,./.git/tags

" ale
let g:ale_set_quickfix = 1
let g:ale_python_autopep8_executable = 'autopep8'
let g:ale_python_autopep8_global = 1
let g:ale_python_autopep8_options = 1
let g:ale_lint_on_text_changed = 'always'
let g:ale_lint_on_enter = 1
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 0
let g:ale_sign_error='✗'
let g:ale_sign_warning = '⚡'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] [%code%] %s [%severity%]'
let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
let g:ale_linters = {
    \ 'python': ['pylint']
    \}
let g:ale_fixers = {
    \    'python': ['autopep8', 'black', 'reorder-python-imports', 'isort'],
    \}

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1

" ctrlp
let g:ctrlp_switch_buffer = 0
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|build\|*.pyc\|*.map'

" nerdtree
let NERDTreeQuitOnOpen=1
let NERDTreeIgnore = ['\.pyc$','__pycache','\.swo']

" pangloss javascript
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1

" testing binds
let g:asyncrun_open = 8

" ycm
set completeopt-=preview
let g:ycm_python_binary_path = '/usr/bin/python3.5'
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_max_num_candidates = 15
let g:ycm_global_ycm_extra_conf = "~/.vim/plugged/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py"

" tag management
set statusline+=%{gutentags#statusline()}

let g:ycm_filetype_blacklist = {
      \ 'tagbar': 1,
      \ 'buffet': 1,
      \ 'nerdtree': 1,
      \ 'markdown': 1,
      \ 'magit': 1,
      \}

" devops
let g:denops_disable_version_check = 1

" snippets
let g:ycm_key_list_select_completion = ['<C-n>', '<tab>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<s-tab>']
let g:SuperTabDefaultCompletionType = '<C-n>'

let g:UltiSnipsExpandTrigger = "<enter>"
let g:UltiSnipsJumpForwardTrigger = "<C-Down>"
let g:UltiSnipsJumpBackwardTrigger = "<C-Up>"
